W7D1 notes

cookies
-

sessions
-session[:session_token] = user.session_token to track that a user is logged in
-after loggout set session token to nil/something random
-need a sessions controller for http requests that deal with user sessions

user schema
-id - integer - not null,primary key
-username - string - not null, unique
-password_digest - string - not null
-session_token - string - not null, unique, indexed

usefull gems
-bcrypt
-better_errors
-binding_of_caller

sign up new users
-make sure db has correct schema as shown above
-resource :session, only: [:new, :create, :destroy]
-add validations and attr_reader for @password (since it's not in DB) - see screenshot
-S.P.I.R.E
	-all goes in user model

	-S: def self.find_by_credentials(username, password)
			user = User.find_by(username: username)
			if user && user.is_password?(password)
				return user
			else
				return nil
			end
		end

	-P: def password=(password)
			@password = password
			self.password_digest = BCrypt::Password.create(password)
		end

	-I: def is_password?(password)
			bcrypt_object = BCrypt::Password.new(self.password_digest)
			bcrypt_object.is_password?(password) #not recursion, this method is a bcrypt library method
		end

	-R: def reset_session_token
			self.session_token = generate_unique_session_token
			self.save!
			return self.session_token
		end

		#helper
		def generate_unique_session_token
			token = SecureRandom::urlsafe_base64
			while User.exists?(session_token: token)
				token = SecureRandom::urlsafe_base64
			end
			return token
		end

	-E: def ensure_session_token
			self.session_token ||= generate_unique_session_token
		end


Login/Logout
	-C.R.R.L.L.L - written in application controller
	
	-skip_before_action :verify_authenticity_token
	-helper_method :logged_in?, :current_user #allows us to use these methods in views
	
	-C: def current_user
			@current_user ||= User.find_by(session_token: session[:session_token])
		end

	-R: def require_logged_in
			redirect_to new_session_url unless logged_in?
		end

	-R: def require_logged_out
			redirect_to users_url if logged_in?
		end

	-L: def logged_in?
			!!current_user #double bang sees if current user is truthy or falsey then flips it
		end

	-L: def login(user)
			session[:session_token] = user.reset_session_token
		end

	-L: def logout
			current_user.reset_session_token if logged_in?
			session[:session_token] = nil
			@current_user = nil
		end

	-dynamic login/logout button by passing these methods to views (see helper_method at top)
		<% if logged_in? %>
			<button>Sign Out</button>
		<% end %>

sessions_controller.rb
	def new #redirect to the login form
		@user = User.new
		render :new # => new.html.erb
	end 

	def create
		@user = User.find_by_credentials(params[:user][:username],params[:user][:password])
		if @user
			login(@user)
			redirect_to users_url #up to design choice
		else
			render :new
		end
	end

	def destroy
		logout
	end

login form (new.html.erb)
	<form action="<%= session_url %>" method="POST" >
		<input type="text" name="user[username]">
		<input type="password" name="user[password]">
		<button>Submit</button>
	</form>

